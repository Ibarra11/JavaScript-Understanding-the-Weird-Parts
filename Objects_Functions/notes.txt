Objects & the dot

    Objects are collections of name/value pairs.  The values
    can also be an object aswell.

    Object can contain primitive properties, object property, and a 
    function.  A function inside a object is refered to as a method.

    THe object has references to the addresses of the propeties and 
    methodson it.

    Two ways of acessing propeties on an object
        Dot notation
            obj.property
        bracket notation
            obj['property']
    
    The dot operator or membor access and the Computed Memeber Acess or bracket notation are
    functions.  They have high precedence.  They take the object look for the property.


Objects and Object Literals

    Object Literal: a way of creating an object, but with just curly braces
    With object literals we can set the function up on line without having to manually
    for every propety.
    Whenever the JavaScript engine sees the curly braces it figues that you are trying
    to create an object.
    In other words, an object literal is just a shorthand way of creating an object.
        var person = {
            firstname: 'ALan Ibarra',
             lastname: 'Ibarra' 
        };

        var person = new Object();
        person.firstname = 'Alan Ibarra';
        person['lastname'] =  'Ibarra';

    
    You can also create a new object with the constructor function
        var person = new Object();


Faking Namespaces

    Namespace: a contaienr for variables and function

    We use namespaces to keep variables and function with the same name seperate

    JavaScript doesnt have namespaces

    But in JavaScript, we can fake namespaces with objects.

    The object gives us the ability to create a fake namespace.

    Namespace collision when two things are named the same.

JSON & Object Literals

    JSON or JavaScript Object Notation looks very similar to object, however, there are
    differences.  Any valid JSON is also valid object literal, but not the other way around
        1. Properties must be wrapped around quotes
        2. No traling commas
    
    We can convert an object to JSON with JSON.stringify(), which converts an object to JSON

    We can conver a JSON object ot object literal with JSON.parse(), it coverts it to a 
    JavaScript object.


Functions are Objects

    First Class Functions: everyting you do with other types you do with functions.

    All functions are objects.

    we can pass them into functions, return functions, and make functions on the fly,
    and assign variables to them.


    A function is a special type of object because all the features of a regual object,
    but also has some extra features.

    Since a function is an object, you can attach properties and methods.  You can even 
    attach other functions.

    It has two additonal properties 
        - A name property, which is optional.  iF no name is provided it is a anonymous function
        - code property, which contains the actual code we write in the funciton

    So any code we write inside the function gets added as a special propety on the function
    called code.

    The code property is special because you an alos invoke or run the function

    When you invoke the function thats when the whole execution context happens.

    If you want to acces a property on a funtion then you have to use
    the dot notation or bracket notation.  If you console.log the function
    you will not see the object properites, by default it will display the 
    code property, which is the code inside the funciotn.


Function Statements and Function Expressions

    Expression is a unit of code that results in a value 

    IF it returns a value, it is an expression.

    IF it doesnt return a value, then it is a statement.
        In this case if is a statement, it doesnt return anything
        the parenthes of the if statement is an expression because
        it evaluates and returns a result.
        if(i === 3)

    Function Statements
        This is a function statement becasue when it is evaluated, it 
        doesn't return a result
        function greet(){
            console.log('hi');
        }

    Function Expression
        var anaonymousGreet = function(){
            console.log('hi');
        }

        Hoisting does not work with function expressions, it does work
        with function statements.  The reaosn being is that the during
        the creation phase of the execution contexts the variable is 
        undefined and when you invoke it you are going to get an error.

        During the creation phase all variables are set to undefined.
        That is the reason why function expressions can not be undefined.

    
By Value vs By reference
    
    Primitive values   
        When you assign a variable to a primitve value.  The variable
        contains the memory address of where the variable is located 
        in memory.  With primitives if you assign a variable to
        another variable that contains a primiitve value it makes a copy

            In this example they are copies of each other, but sit in 
            different places in memory.  Changing one doesn't affect the
            other.
            var a = 5;
            var b = a;

    By value: two seperate copies in memory

    Primitive types are by value


    Objects

        With objects if you assign a variable equal to an objects property
        you are linking the variable to the same location that property points;
        Essentailly they both have the same memory reference.
        var obj = {a:1}
        var b = obj.a;
        b = 5;

        All objects are set by reference when setting them equal to variables
        or passing them to functions.  That includes function because
        functions are objects.

        var c = {greeting: 'hi'};
        THe javasvript engine sees this expression and sees that c
        is an object, it then assigns d the same memory reference that
        c contains to d.  In other words, both c and d reference the same
        place in  memory.  Changin one affects the other.
        var d = c;

        Mutate: TO change something

        immutable: means that it cant be changed

        Even when you pass obj as an argumement to a function
        , it can be mutated. because you are passing by reference.

        The equal operator sets up new memory space (new address)

        c = {greeting: ''}
        In this the equals operator sees that the object literal is 
        not a preexisitng object in memory, so it assigned a new 
        memory address for it.

        In sum, with obejcts if you are assigning a variable equal 
        to an object in memory that already exist, it is going to set
        the variable equal to same location memory as the object.  However,
        if you set a variable equal to an object does not exist, it creates
        a new memory space for that obejct and points the variable to it.


Objects, Functions, and this

    When a function is invoked, it creates a new exeuciton contexts

    Each execution context has a variable environemnt where all the 
    variables live.  It also has a link to the outer environment.  It;s
    outer environment is determined lexically where it sets.

    Each exectuion context creates the this keyword.

    At global exection this points the global object, which is hte 
    window.

    When you invoke the function or call the code property on the function,
    the this keyword inside function still points to the global object.

    So inside the function we can attach variables to the global object
    by doing something like this.newvariable = 'hello';  We then access
    that variable in the global execution context liek so newvariable

    So with object methods if you use the this keyword.  The this keyword
    actually points to the object itself not the global object.  With
    methods you can chagne the object properties within a method

    var c = {
        name: 'The c OBject',
        log: function(){
            this.name = 'YOu have been changed';
            console.log(this)
        }
    }

    Withing a method if you write another function.  The this keyword
    no longer points to the object, it points to the global object;
         var c = {
        name: 'The c OBject',
        log: function(){
            this.name = 'YOu have been changed';
            console.log(this)
            var ex = function(){
                console.log(this)
            }
        }
    }


Arrays Collections of Anythings

    An array is a collection.  The items in the array can be 
    of any type.

    In most programming languages an array can hold a list of 
    a certain type.

    In JavaScript, An array can contain many types and is not restricted to one 
    type.

    Two ways to create an array

    var a = new Array();

    var a [];

Arguements & Spread

    When you execute a funciton a new execution context is created.  The JavaScript engine sets up a couple of things when 
    a new execution environment is created.
        - Variable Environment: holds the variables
        - A link to the outer environment for the scope chain
        - this keyword 
        - For functions it also sets up arguements, which contains all the values you pass to a function

    In JavaScript when you define a function with parameters and invoke that function and don't pass any
    arguements to the function, it will not throw an error.  In most other programming languages this will throw
    an error.  The reason it doesnt throw an error in JavaScript is because of hoisting.  The three params have 
    already been given values before it was invoked, which was undefined.  In sum, this means that JavaScript does
    not require you to pass arguements.
        function example(param1, param2, param3){
            console.log(param1+param2+param3)
        };

        example();

    Within the function, we have access to the arguements variable, which contains all the values that were passed 
    to the function.  It is arraylike, however, does not function like one.  You can access values of arguements
    using the subscript, you can not like push or pop.

    Spread operator: In ES6 you can use the spread operator to contain an array of arguements.  
        function spreadEx(param1, param2, ...params){
            params[0]= 'hello';
            params[1] = 5;
        }

        speadEx(1,2,'hello',5,10,);


Function Overloading

    In JavaScript there is no function overloading.

    Function Overloading is when you multiple functions with the same name however have differnt number of 
    arguements.


Syntax Parsers

    The code we write isnt what the computer evaluates.  There is an intermediate step that happens that
    converts your code to something that the computer can understand.

Automatic Semicolon insertion

    In core JavaScript semicolons are optional. The reason their optional is because the JavaScript places them
    for you where they are expected.  A good idea would be to put your own semicolons, so you don't let JavaScript
    do it for you. If the JavaScript engine sees a return and then a carriage return it places a semicolon on the
    return. 
    In this case the JavScript engine will place a semi colon on the return and not return the object like you expected
        return
        {

        }

Whitespace

    Whitespace invisible charaters that create literal space in your written code.
        carraige returns, tabs, spaces
    In JavaScript, we can use white spce to clarify code and write comments.



IIFE: Immediately Invoked Function Expression

    Functions are special type of objects with two extra properties.  A code property and
    a name property.  The name property is optional.

    With functions, if it expects parameters and recieves none, it will not throw an error. THe
    parameters will just be undefined.  During the creation phase the parameters are set to 
    undefined.  We can access all arguemetns passed into the function with the arguements 
    variabel, which is created in the execution context of the function.  It is arraylike, but
    doesn't offer the same functionality.

    Immediately invoked function expression
        An immediately invoked function is a function that is invoked immediately after it is
        created.
        var greeting = function(name){
            console.log('Hello ' + name);
        }();

        Instead of doing something like this
            greeting();

        With immediately invoked function expression we can pass in values
        we invoke it.  Remember that greeting holds the returned value, which
        is a string.  If you try to invoke JavaScript will throw an exception.
        In other words greeting contains the invocation of the anonymous function,
            var greeting = function(name){
            return 'Hello ' + name;
        }('Alan');


    Function expression
        A standalone funciton expression that is not assigned ot a variable
        will throw an error.  The reason is because it expects it to be a function
        statement. To trick javascript we jsut need to wrap the function expression
        in parenetheses.
        (function(name){
                console.log('Hello' + name);
        }('Alan'));

        We can invoke the IIFE in two ways either outside the parentheses or
        inside the parentehses, it works the same
        (function(name){

        }())

        (function(name){

        })() 


IIFE's and Safe code

    When the JavaScript engine encounters an IIFE, it places the function object in memory.
    It then creates a new execution context for the anonymous function.  Any variables defined
    within the IIFE are placed in the environemnt variables of the execution context.  So, any
    variables you declare in the IIFE is not accessible in the global exection context.  
    By defining variables within an IIFE, you are isolating those variables from any collision.
    In other words it is safe.


Understanding Closures

    function greet(whattosay){
        return function(name){
            console.log(whattosay + ' ' + name);
        }
    }

    var sayHi = greet('Hello');
    sayHi('Alan Ibarra ');

    When the JavaScript engine executes the greet function it creates a new execution context.
    It places the parameters in the environment variables for that execution context.
    Under most circumstances, any environment variables in a execution context are collected
    by the garbage collector.

    when you invoke sayHI it creates a new execution context.

    An execution context is popped off the exeuciton stack either when the function returns
    or reaches the outer } brace.

    Every execution context has link to the outer environment. 

    When the sayHI function looks for whattosay it goes down the scope chain.

    Although, the greet functions have been popped of the execution stack, the sayHi 
    execution context has a access to its enviorment variable memory space.

    A closure is when you have an function that was invoked in a different execution context from where it was created.
    The function even though invoked outside of its execution context where it was created still has access to the
    variables and functions of the execution context from where it was created.

    Free variables: are variables that are defined outside a function, but the function still has access to them



Function Factories

    Function Factory: is a function that creates a function.

    With closures we can can create functions that perform different things.  So, essentialy you're function can have a variety
    of different things it can do.

    function makeGreeting(language){
        return function(firstname, lastname){
            if(language === 'en'){
                console.log('Hello ' + firstname + ' '  + lastname);
            }
            else if(language === 'es'){
                console.log('Hola ' + firstname + ' '  + lastname);
            }
        }
    }

    let englishGreeting = makeGreeting('en');
    let spanishGreeting = makeGreeting('es');

    Once you call the makeGreeting with your arguement and language is set equal to it is no longer accessible, which means you
    can not update it, you can only read it.  Just rememeber closures enforce data privacy.

    englishGreeting('Alan','Ibarra');
    spanishGreeting('Alan','Ibarra');


Closures and Callbacks

    function sayHiLater(){

        var greeting = 'hi';

        setTimeout(function(){
        console.log(greeting)
    }, 3000);

    }

    Callback Function: a function you give to another function to be invoked when thh other function is finished




Call, Apply, Bind

    Three main parts to an execution context
        1. Variable Environment: place in memory where all variables are stored
        2. Outer environemnt: a link to the outer environment lexically
        3. The this object, which refrences the global object in most cases


    A function is a special type of object.  It has two special properties, it has the name property and the code property.
    Additionaly, every function has available to it to it the methods call, apply, bind.  

    var person = {
        firstname: 'Alan',
        lastname: 'Ibarra',
        getFullName: function(){
            var fullname = this.firstname + '' + this.lastname;
            return fullname;
        }
    }

    What call, apply, and bind gives us is the ability to control what the this object refrences


    If I were to inkoke this function as it is is, the JavaScript engine will throw an error.  The reason is because
    the this object references the global object and the global object does not have a get fullname method.  With call, apply, and bind
    we can invoke this function and set the this keyword to point to what we want;
    
    var logName = function(param1, param2){
        console.log('Logged: ' + this.getFullName());
    }


    bind method creates a new function and when invoked sets the this keyword equal to the value passed.  Bind does not
    execute the function.
    logName.bind(person)();

    The call method invokes the function and sets the this keyword at the same time
    So, know when I invoke logName if there any instances of this, it will reference the person object.
    logName.call(person, 'ex1', 'ex2');

    The apply method does exactly the same thing as the call method, accept that it wants arguements in an array,
    logName.apply(person, ['en', 'es' ])



    Function borrowing
    
    With bind, call, and apply we can use methods of other objects.  In this example the properties are the same, but we are
    using a  method from a different object.

    var person2 = {
        firstname: 'jane',
        lastname: 'doe'
    }

    person.getFullName.apply(person2)



    Funciton Currying

    funciton multiply(a,b){
        return a*b;
    }

    So, when you use .bind, it creates a new function that is a  copy of the function with the this keyword set.  Now, if you 
    pass any arguements in the .bind, it sets the parameters of this new copied function. In this case bind is permenately setting
    the values.  So anytime you invoke mulitply by two a will always equal the value 2;

    With bind we can create functions with parameters set permanently.

    var multiplyByTwo = multiply.bind(this,2);
    

    






    
    
    



    





        
        



    

    













