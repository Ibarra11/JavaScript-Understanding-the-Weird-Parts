
Lexical Environments
    Is dealing with where you right some thing in your code.  
    The order in which you write it matters.

Objects
    Name/Value pairs is a name that maps to a unqiue value.  This means your names
    should be unique.  The name can be repeated in different execution contexts.

    A object is a  collection of name/value pairs;

Execution Contexts 
    The execution context is a wrapper to manage your code.  By defualt,
    the the exeuction context of your JavaScript is the global context.

    Everytime you run a JavaScript file, the engine creates an execution
    context for you.  

    It creates two things for you
    A Global object, which is the window obejct 
    A special variable called this, which is the window object because
    you are running the app in the browser.

    If you are running JavaScript in another environment other than
    the browser, the global object will not be the window.

    Creating variables and function that are not within a function meaning
    that they are in the global context are attached to the global 
    object as a name/value pair.


Creation

   There are two phases in an execution context

    Creation phase
        Its sets up a memory space for variables and functions when
        it parses your code.

        It hoist your code by going through it and documenting variable
        declarations and function declarations.  So, now those
        variables and functions exists in memory before you code is 
        executed line by line.

        This happens before you code  begins to be executed line By
        line.

        For function declarations during the creation phase the entire
        function is placed into memory.  This is why you invoke it before
        you declare it works as intended.  Not for variable assignments;

        All variables in JavaScript are intially set to undefined;

    Exeuction Phase

        During this phase variable assignments are performed

Hoisting

    Normally in other programming languages it executes code in
    a from top to bottom.  So, if you try to invoke a function or
    use a variable before declaring it, an error will occur.

    It makes variables and functions available before their 
    declarations;

    Hoisting does not work with the let variable declarations
    becuase variables are intially set to undefined.

    You can invoke function declarations before you declare them 
    with no issue.  For variable declaration with the var keyword,
    if you reference you are going to get undefined.


undefined
    When a variable is undefined, it means that it has not set to 
    a value.  You should never explicitly set a variable to undefined.

    Undefined is a special value

    During the creation phase of the execution context the jS engine 
    places in memory variable declarations and functions.  During this
    phase all variables values will be set to undefines.  However, for
    functions they will entirely be put into memory so they can be invoked.


Single Threaded Synchronou Execution

    Single Threaded means that one command is being executed at a time.
    JavaScript behaves in a single threaded manner.

    Synchronous means one at a time in order


Function Invocation & The Execution Stack

    Function invocation just means running a function

    When you invoke a function, it creates a new execution context
    and is placed on the execution stack.

    The top item in the statck is the current execution context that
    is running.

    Once the function finishes, its execution context is popped off the 
    stack.


Functions, Context, and Variable Envrinoments

    The variable environemtns is in relation to the execution context.

    Every exection context has its own variable environment.

    Scope where are we able to see the variable or access the variable.

    Any variables declared withing a function only lives within that function.
    It can not be accessed outside of it.


The Scope Chain

    When you an execution context is created the JavaScript engine
    cretes a global object and a special variables called this.  Additionaly,
    it also creates a reference to the the outer environment.

    When you reference a variable in a execution context it is going to
    look in its environment for the variable and if it does not find it 
    looks in the outer environment for it.

    Lexical Environment where something is physically written in your
    code.

    Scope in JavaScript is determined by where lexically or physically
    the variable or function was decalred.

    The outer environment of the execution context is dependent on 
    its lexical environment.

    Another way of thinking about scope is where was the function
    or variable created with regard to the execution context.



Scope, ES6 & let

    Scope is a where a variable is available in your code.

    Let is  a new way of declaring variables and is block scoped.

    The let keyword is not hoisted like the var keyword.  If you try
    to access it before it is declared, you will get an error.


What about Asynchrounous callbacks

    Asynchrounous: more than one at a time

    Event Queue
        Any events that want to be notified of is placed in the 
        event queue.

        The JavaScript engine looks at the event queue after the
        execution stack is empty.

        If the event requires a funciton that is placed in the 
        exeuction context and then looks again at the event queue.











    



    





